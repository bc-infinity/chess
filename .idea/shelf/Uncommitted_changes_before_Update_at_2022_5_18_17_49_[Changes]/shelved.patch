Index: src/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import view.ChessGameFrame;\r\n\r\nimport javax.swing.*;\r\n        import java.awt.*;\r\n        import java.awt.event.ActionEvent;\r\n        import java.awt.event.ActionListener;\r\n\r\npublic class Menu extends JFrame implements ActionListener {\r\n    //定义两个按钮\r\n    private final JButton Game_Start;\r\n    private final JButton Game_Over;\r\n    public Menu(){\r\n        //定义按钮的排列方式\r\n        setLayout(new FlowLayout());\r\n\r\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\r\n        this.setSize(300,200);\r\n        this.setLocationRelativeTo(null);\r\n\r\n        Game_Start = new JButton(\"Start\");\r\n        Game_Over = new JButton(\"Over\");\r\n        this.add(Game_Start);\r\n        this.add(Game_Over);\r\n        Game_Start.addActionListener(this);\r\n        Game_Over.addActionListener(this);\r\n\r\n        this.setVisible(true);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Menu menu = new Menu();\r\n    }\r\n    /**\r\n     * Invoked when an action occurs.\r\n     *\r\n     * @param e\r\n     */\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if(e.getSource() == Game_Start){\r\n            this.dispose();\r\n            SwingUtilities.invokeLater(() -> {\r\n                ChessGameFrame mainFrame = new ChessGameFrame(900, 600);\r\n                mainFrame.setVisible(true);\r\n            });\r\n        }\r\n        if(e.getSource() == Game_Over){\r\n            this.dispose();\r\n            System.exit(0);\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Menu.java b/src/Menu.java
--- a/src/Menu.java	(revision a6c2f0ef027deb4577b57e3d68144f6dd19725d0)
+++ b/src/Menu.java	(date 1652862164612)
@@ -17,8 +17,8 @@
         this.setSize(300,200);
         this.setLocationRelativeTo(null);
 
-        Game_Start = new JButton("Start");
-        Game_Over = new JButton("Over");
+        Game_Start = new JButton(" Start ");
+        Game_Over = new JButton(" Over ");
         this.add(Game_Start);
         this.add(Game_Over);
         Game_Start.addActionListener(this);
Index: src/view/Chessboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport model.*;\r\nimport controller.ClickController;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 这个类表示面板上的棋盘组件对象\r\n */\r\npublic class Chessboard extends JComponent {\r\n    /**\r\n     * CHESSBOARD_SIZE： 棋盘是8 * 8的\r\n     * <br>\r\n     * BACKGROUND_COLORS: 棋盘的两种背景颜色\r\n     * <br>\r\n     * chessListener：棋盘监听棋子的行动\r\n     * <br>\r\n     * chessboard: 表示8 * 8的棋盘\r\n     * <br>\r\n     * currentColor: 当前行棋方\r\n     */\r\n    private static final int CHESSBOARD_SIZE = 8;\r\n    private final ChessComponent[][] chessComponents = new ChessComponent[CHESSBOARD_SIZE][CHESSBOARD_SIZE];\r\n    private ChessColor currentColor = ChessColor.BLACK;\r\n    //all chessComponents in this chessboard are shared only one model controller\r\n    private final ClickController clickController = new ClickController(this);\r\n    private final int CHESS_SIZE;\r\n    public ArrayList<List<String>> steps = new ArrayList<>();\r\n\r\n\r\n    public Chessboard(int width, int height) {\r\n        setLayout(null); // Use absolute layout.\r\n        setSize(width, height);\r\n        CHESS_SIZE = width / 8;\r\n        System.out.printf(\"chessboard size = %d, chess size = %d\\n\", width, CHESS_SIZE);\r\n        //initiateEmptyChessboard();\r\n        initial();\r\n        initChessOnBoard(chessComponents);\r\n\r\n\r\n        // FIXME: Initialize chessboard for testing only.\r\n        /*\r\n        initRookOnBoard(0, 0, ChessColor.BLACK);\r\n        initRookOnBoard(0, CHESSBOARD_SIZE - 1, ChessColor.BLACK);\r\n        initRookOnBoard(CHESSBOARD_SIZE - 1, 0, ChessColor.WHITE);\r\n        initRookOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 1, ChessColor.WHITE);\r\n\r\n        initKnightOnBoard(0,1,ChessColor.BLACK);\r\n        initKnightOnBoard(0,CHESSBOARD_SIZE - 2, ChessColor.BLACK);\r\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, 1, ChessColor.WHITE);\r\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 2, ChessColor.WHITE);\r\n\r\n        initBishopOnBoard(0, 2, ChessColor.BLACK);\r\n        initBishopOnBoard(0, CHESSBOARD_SIZE - 3, ChessColor.BLACK);\r\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, 2, ChessColor.WHITE);\r\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 3, ChessColor.WHITE);\r\n\r\n        initKingOnBoard(0,4,ChessColor.BLACK);\r\n        initKingOnBoard(CHESSBOARD_SIZE - 1, 4, ChessColor.WHITE);\r\n        initQueenOnBoard(0,3,ChessColor.BLACK);\r\n        initQueenOnBoard(CHESSBOARD_SIZE - 1, 3, ChessColor.WHITE);\r\n\r\n        for(int i=0;i<8;i++){\r\n            initPawnOnBoard(1,i,ChessColor.BLACK);\r\n            initPawnOnBoard(6,i,ChessColor.WHITE);\r\n        }\r\n         */\r\n\r\n    }\r\n\r\n    public ChessComponent[][] getChessComponents() {\r\n        return chessComponents;\r\n    }\r\n\r\n    public ChessColor getCurrentColor() {\r\n        return currentColor;\r\n    }\r\n\r\n    public void putChessOnBoard(ChessComponent chessComponent) {\r\n        int row = chessComponent.getChessboardPoint().getX(), col = chessComponent.getChessboardPoint().getY();\r\n\r\n        if (chessComponents[row][col] != null) {\r\n            remove(chessComponents[row][col]);\r\n        }\r\n        add(chessComponents[row][col] = chessComponent);\r\n    }\r\n\r\n    public void swapChessComponents(ChessComponent chess1, ChessComponent chess2) {\r\n        // Note that chess1 has higher priority, 'destroys' chess2 if exists.\r\n        if (!(chess2 instanceof EmptySlotComponent)) {\r\n            remove(chess2);\r\n            add(chess2 = new EmptySlotComponent(chess2.getChessboardPoint(), chess2.getLocation(), clickController, CHESS_SIZE));\r\n        }\r\n        chess1.swapLocation(chess2);\r\n        int row1 = chess1.getChessboardPoint().getX(), col1 = chess1.getChessboardPoint().getY();\r\n        chessComponents[row1][col1] = chess1;\r\n        int row2 = chess2.getChessboardPoint().getX(), col2 = chess2.getChessboardPoint().getY();\r\n        chessComponents[row2][col2] = chess2;\r\n\r\n        chess1.repaint();\r\n        chess2.repaint();\r\n        List<String> result = new ArrayList<>();\r\n        for (int i = 0; i < 8; i++) {\r\n            StringBuilder str = new StringBuilder();\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j] instanceof RookChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.BLACK)\r\n                        str.append('R');\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.WHITE)\r\n                        str.append('r');\r\n                }\r\n                if (chessComponents[i][j] instanceof KnightChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.BLACK)\r\n                        str.append('N');\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.WHITE)\r\n                        str.append('n');\r\n                }\r\n                if (chessComponents[i][j] instanceof PawnChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.BLACK)\r\n                        str.append('P');\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.WHITE)\r\n                        str.append('p');\r\n                }\r\n                if (chessComponents[i][j] instanceof QueenChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.BLACK)\r\n                        str.append('Q');\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.WHITE)\r\n                        str.append('q');\r\n                }\r\n                if (chessComponents[i][j] instanceof BishopChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.BLACK)\r\n                        str.append('B');\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.WHITE)\r\n                        str.append('b');\r\n                }\r\n                if (chessComponents[i][j] instanceof EmptySlotComponent) {\r\n                    str.append('_');\r\n                }\r\n            }\r\n            result.add(str.toString());\r\n        }\r\n        if (getCurrentColor() == ChessColor.BLACK)\r\n            result.add(\"b\");\r\n        if (getCurrentColor() == ChessColor.WHITE)\r\n            result.add(\"w\");\r\n        steps.add(result);\r\n        if (ifBlackCheckmate(chessComponents)) {\r\n            if (blackEscapeCheckmate(chessComponents)){\r\n\r\n            }else{\r\n\r\n            }\r\n        }\r\n        if (ifWhiteCheckmate(chessComponents)) {\r\n            if(whiteEscapeCheckmate(chessComponents)){\r\n\r\n            }else {\r\n\r\n            }\r\n        }\r\n    }\r\n/*\r\n    public void initiateEmptyChessboard() {\r\n        for (int i = 0; i < chessComponents.length; i++) {\r\n            for (int j = 0; j < chessComponents[i].length; j++) {\r\n                if (chessComponents[i][j] instanceof EmptySlotComponent) {\r\n                    putChessOnBoard(chessComponents[i][j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    */\r\n\r\n    public void swapColor() {\r\n        currentColor = currentColor == ChessColor.BLACK ? ChessColor.WHITE : ChessColor.BLACK;\r\n    }\r\n\r\n    private void initChessOnBoard(ChessComponent[][] chessComponents) {\r\n        for (int i = 0; i < chessComponents.length; i++) {\r\n            for (int j = 0; j < chessComponents[i].length; j++) {\r\n                ChessComponent chessComponent = chessComponents[i][j];\r\n                /*\r\n                if(chessComponent instanceof RookChessComponent){\r\n                    initRookOnBoard(i,j,chessComponent.getChessColor());\r\n                }else if(chessComponent instanceof KnightChessComponent){\r\n                    initKnightOnBoard(i,j,chessComponent.getChessColor());\r\n                }else if(chessComponent instanceof KingChessComponent){\r\n                    initKingOnBoard(i,j,chessComponent.getChessColor());\r\n                }else if(chessComponent instanceof QueenChessComponent){\r\n                    initQueenOnBoard(i,j,chessComponent.getChessColor());\r\n                }else if(chessComponent instanceof BishopChessComponent){\r\n                    initBishopOnBoard(i,j,chessComponent.getChessColor());\r\n                }else if(chessComponent instanceof PawnChessComponent){\r\n                    initPawnOnBoard(i,j,chessComponent.getChessColor());\r\n                }\r\n                 */\r\n                chessComponent.setVisible(true);\r\n                putChessOnBoard(chessComponent);\r\n            }\r\n        }\r\n    }\r\n/*\r\n    private void initRookOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new RookChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n    private void initKnightOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new KnightChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n    private void initKingOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new KingChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n    private void initQueenOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new QueenChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n    private void initBishopOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new BishopChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n    private void initPawnOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new PawnChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n */\r\n\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    }\r\n\r\n\r\n    private Point calculatePoint(int row, int col) {\r\n        return new Point(col * CHESS_SIZE, row * CHESS_SIZE);\r\n    }\r\n\r\n    public void loadGame(List<String> chessData) {\r\n        if (chessData.get(8).charAt(0) == 'w') {\r\n            currentColor = ChessColor.WHITE;\r\n        } else {\r\n            currentColor = ChessColor.BLACK;\r\n        }\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                switch (chessData.get(i).charAt(j)) {\r\n                    case ('P') -> chessComponents[i][j] = new PawnChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);\r\n                    case ('p') -> chessComponents[i][j] = new PawnChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);\r\n                    case ('R') -> chessComponents[i][j] = new RookChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);\r\n                    case ('r') -> chessComponents[i][j] = new RookChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);\r\n                    case ('N') -> chessComponents[i][j] = new KnightChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);\r\n                    case ('n') -> chessComponents[i][j] = new KnightChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);\r\n                    case ('B') -> chessComponents[i][j] = new BishopChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);\r\n                    case ('b') -> chessComponents[i][j] = new BishopChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);\r\n                    case ('Q') -> chessComponents[i][j] = new QueenChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);\r\n                    case ('q') -> chessComponents[i][j] = new QueenChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);\r\n                    case ('K') -> chessComponents[i][j] = new KingChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);\r\n                    case ('k') -> chessComponents[i][j] = new KingChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);\r\n                    case ('_') -> chessComponents[i][j] = new EmptySlotComponent(new ChessboardPoint(i, j), calculatePoint(i, j), clickController, CHESS_SIZE);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initial() {\r\n        List<String> chessboards = new ArrayList<>();\r\n        chessboards.add(\"RNBQKBNR\");\r\n        chessboards.add(\"PPPPPPPP\");\r\n        chessboards.add(\"________\");\r\n        chessboards.add(\"________\");\r\n        chessboards.add(\"________\");\r\n        chessboards.add(\"________\");\r\n        chessboards.add(\"pppppppp\");\r\n        chessboards.add(\"rnbqkbnr\");\r\n        chessboards.add(\"w\");\r\n        steps.clear();\r\n        steps.add(chessboards);\r\n        loadGame(steps.get(0));\r\n    }\r\n\r\n    public boolean ifWhiteCheckmate(ChessComponent[][] chessComponents) {\r\n        int x = 0, y = 0;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j] instanceof KingChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.WHITE) {\r\n                        x = i;\r\n                        y = j;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        List<ChessboardPoint> move;\r\n        boolean checkmate = false;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j].getChessColor() == ChessColor.BLACK) {\r\n                    move = chessComponents[i][j].canMoveTo(chessComponents);\r\n                    if (move.size() != 0) {\r\n                        for (int t = 0; t < move.size(); t++) {\r\n                            if (move.get(t).getX() == x && move.get(t).getY() == y) {\r\n                                checkmate = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return checkmate;\r\n    }\r\n\r\n    public boolean ifBlackCheckmate(ChessComponent[][] chessComponents) {\r\n        int x = 0, y = 0;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j] instanceof KingChessComponent) {\r\n                    if (chessComponents[i][j].getChessColor() == ChessColor.BLACK) {\r\n                        x = i;\r\n                        y = j;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        List<ChessboardPoint> move;\r\n        boolean checkmate = false;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j].getChessColor() == ChessColor.WHITE) {\r\n                    move = chessComponents[i][j].canMoveTo(chessComponents);\r\n                    if (move.size() != 0) {\r\n                        for (int t = 0; t < move.size(); t++) {\r\n                            if (move.get(t).getX() == x && move.get(t).getY() == y) {\r\n                                checkmate = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return checkmate;\r\n    }\r\n\r\n    public boolean whiteEscapeCheckmate(ChessComponent[][] chessComponents) {\r\n        ChessComponent[][] tryEscape = new ChessComponent[8][8];\r\n        boolean safe = false;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                tryEscape[i][j] = chessComponents[i][j];\r\n            }\r\n        }\r\n        List<ChessboardPoint> move;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j].getChessColor() == ChessColor.WHITE) {\r\n                    move = chessComponents[i][j].canMoveTo(chessComponents);\r\n                    if (move.size() != 0) {\r\n                        for (int t = 0; t < move.size(); t++) {\r\n                            tryEscape[move.get(t).getX()][move.get(t).getY()] = tryEscape[i][j];\r\n                            tryEscape[i][j] = new EmptySlotComponent(new ChessboardPoint(i, j), calculatePoint(i, j), clickController, CHESS_SIZE);\r\n                            if (!ifWhiteCheckmate(tryEscape)) {\r\n                                safe = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (safe){\r\n                        break;\r\n                    }\r\n                }\r\n                if (safe) {\r\n                    break;\r\n                }\r\n            }\r\n            if (safe){\r\n                break;\r\n            }\r\n        }\r\n        return safe;\r\n    }\r\n\r\n    public boolean blackEscapeCheckmate(ChessComponent[][] chessComponents) {\r\n        ChessComponent[][] tryEscape = new ChessComponent[8][8];\r\n        boolean safe = false;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                tryEscape[i][j] = chessComponents[i][j];\r\n            }\r\n        }\r\n        List<ChessboardPoint> move;\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                if (chessComponents[i][j].getChessColor() == ChessColor.BLACK) {\r\n                    move = chessComponents[i][j].canMoveTo(chessComponents);\r\n                    if (move.size() != 0) {\r\n                        for (int t = 0; t < move.size(); t++) {\r\n                            tryEscape[move.get(t).getX()][move.get(t).getY()] = tryEscape[i][j];\r\n                            tryEscape[i][j] = new EmptySlotComponent(new ChessboardPoint(i, j), calculatePoint(i, j), clickController, CHESS_SIZE);\r\n                            if (!ifBlackCheckmate(tryEscape)) {\r\n                                safe = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (safe) {\r\n                    break;\r\n                }\r\n            }\r\n            if (safe) {\r\n                break;\r\n            }\r\n        }\r\n        return safe;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/Chessboard.java b/src/view/Chessboard.java
--- a/src/view/Chessboard.java	(revision a6c2f0ef027deb4577b57e3d68144f6dd19725d0)
+++ b/src/view/Chessboard.java	(date 1652866132258)
@@ -41,7 +41,6 @@
         initial();
         initChessOnBoard(chessComponents);
 
-
         // FIXME: Initialize chessboard for testing only.
         /*
         initRookOnBoard(0, 0, ChessColor.BLACK);
@@ -69,8 +68,23 @@
             initPawnOnBoard(6,i,ChessColor.WHITE);
         }
          */
+    }
+
+
+    public Chessboard(int width, int height, ArrayList<List<String>> steps) {
+        setLayout(null);
+        setSize(width, height);
+        CHESS_SIZE = width / 8;
+        System.out.printf("chessboard size = %d, chess size = %d\n", width, CHESS_SIZE);
 
+        loadGame(steps.get(steps.size()-1));
+
+        //initiateEmptyChessboard();
+        //initial();
     }
+
+
+
 
     public ChessComponent[][] getChessComponents() {
         return chessComponents;
@@ -255,8 +269,8 @@
         } else {
             currentColor = ChessColor.BLACK;
         }
-        for (int i = 0; i < 8; i++) {
-            for (int j = 0; j < 8; j++) {
+        for (int i = 0; i < chessData.size(); i++) {
+            for (int j = 0; j < chessData.get(i).length(); j++) {
                 switch (chessData.get(i).charAt(j)) {
                     case ('P') -> chessComponents[i][j] = new PawnChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.BLACK, clickController, CHESS_SIZE);
                     case ('p') -> chessComponents[i][j] = new PawnChessComponent(new ChessboardPoint(i, j), calculatePoint(i, j), ChessColor.WHITE, clickController, CHESS_SIZE);
Index: src/view/ChessGameFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.GameController;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 这个类表示游戏过程中的整个游戏界面，是一切的载体\r\n */\r\npublic class ChessGameFrame extends JFrame {\r\n    //    public final Dimension FRAME_SIZE ;\r\n    private final int WIDTH;\r\n    private final int HEIGHT;\r\n    public final int CHESSBOARD_SIZE;\r\n    private GameController gameController;\r\n    Chessboard chessboard;\r\n    ChessGameFrame mainFrame;\r\n\r\n    public ChessGameFrame(int width, int height) {\r\n        setTitle(\"2022 CS102A Project Demo\"); //设置标题\r\n        this.WIDTH = width;\r\n        this.HEIGHT = height;\r\n        this.CHESSBOARD_SIZE = HEIGHT * 4 / 5;\r\n\r\n        setSize(WIDTH, HEIGHT);\r\n        setLocationRelativeTo(null); // Center the window.\r\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //设置程序关闭按键，如果点击右上方的叉就游戏全部关闭了\r\n        setLayout(null);\r\n\r\n        addChessboard();\r\n        addLabel();\r\n        addHelloButton();\r\n        addLoadButton();\r\n\r\n        remake();\r\n    }\r\n\r\n\r\n    /**\r\n     * 在游戏面板中添加棋盘\r\n     */\r\n    private void addChessboard() {\r\n        this.chessboard = new Chessboard(CHESSBOARD_SIZE, CHESSBOARD_SIZE);\r\n        gameController = new GameController(chessboard);\r\n        chessboard.setLocation(HEIGHT / 10, HEIGHT / 10 - 10);\r\n        add(chessboard);\r\n    }\r\n\r\n    /**\r\n     * 在游戏面板中添加标签\r\n     */\r\n    private void addLabel() {\r\n        JLabel statusLabel = new JLabel(\"Sample label\");\r\n        statusLabel.setLocation(HEIGHT+60, HEIGHT / 10 - 30);\r\n        statusLabel.setSize(150, 50);\r\n        statusLabel.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n        add(statusLabel);\r\n    }\r\n\r\n    /**\r\n     * 在游戏面板中增加一个按钮，如果按下的话就会显示Hello, world!\r\n     */\r\n    private void addHelloButton() {\r\n        JButton button = new JButton(\"Show Hello Here\");\r\n        button.addActionListener((e) -> JOptionPane.showMessageDialog(this, \"Hello, world!\"));\r\n        button.setLocation(HEIGHT, HEIGHT / 10 + 30);\r\n        button.setSize(200, 50);\r\n        button.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n        add(button);\r\n    }\r\n\r\n    private void addLoadButton() {\r\n        JButton button = new JButton(\"Load\");\r\n        button.setLocation(HEIGHT, HEIGHT / 10 + 90);\r\n        button.setSize(200, 50);\r\n        button.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n        add(button);\r\n\r\n        button.addActionListener(e -> {\r\n            System.out.println(\"Click load\");\r\n            String path = JOptionPane.showInputDialog(this,\"Input Path here\");\r\n            gameController.loadGameFromFile(path);\r\n        });\r\n    }\r\n\r\n\r\n    private void remake(){\r\n        JButton Remake = new JButton(\"Remake\");\r\n        Remake.setLocation(HEIGHT, HEIGHT / 10 + 150);\r\n        Remake.setSize(200, 50);\r\n        Remake.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n        add(Remake);\r\n\r\n        Remake.addActionListener(e -> {\r\n            System.out.println(\"Click remake\");\r\n            remove(this.chessboard);\r\n            repaint();\r\n\r\n            this.chessboard = new Chessboard(CHESSBOARD_SIZE, CHESSBOARD_SIZE);\r\n            gameController = new GameController(chessboard);\r\n            chessboard.setLocation(HEIGHT / 10, HEIGHT / 10 - 10);\r\n            add(chessboard);\r\n        });\r\n\r\n          \r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/ChessGameFrame.java b/src/view/ChessGameFrame.java
--- a/src/view/ChessGameFrame.java	(revision a6c2f0ef027deb4577b57e3d68144f6dd19725d0)
+++ b/src/view/ChessGameFrame.java	(date 1652864876641)
@@ -36,6 +36,7 @@
         addLoadButton();
 
         remake();
+        undo();
     }
 
 
@@ -104,8 +105,33 @@
             chessboard.setLocation(HEIGHT / 10, HEIGHT / 10 - 10);
             add(chessboard);
         });
+    }
 
-          
+    private void undo(){
+        JButton Undo = new JButton("undo");
+        Undo.setLocation(HEIGHT, HEIGHT / 10 + 210);
+        Undo.setSize(200, 50);
+        Undo.setFont(new Font("Rockwell", Font.BOLD, 20));
+        add(Undo);
+
+        Undo.addActionListener(e -> {
+            if( chessboard.steps.size() > 1 ){
+                System.out.println(chessboard.steps.size());
+                System.out.println("Click undo");
+                this.chessboard.steps.remove(this.chessboard.steps.size()-1);
+                remove(this.chessboard);
+                System.out.println(chessboard.steps.size());
+                repaint();
+
+                this.chessboard = new Chessboard(CHESSBOARD_SIZE, CHESSBOARD_SIZE, chessboard.steps);
+                gameController = new GameController(chessboard);
+                chessboard.setLocation(HEIGHT / 10, HEIGHT / 10 - 10);
+                add(chessboard);
+                System.out.println(chessboard.steps.size()-1);
+            }
+            else
+                JOptionPane.showMessageDialog(this, "error");
+        });
     }
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"40b01812-44d1-4a7a-94d6-52a249b190cf\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/Menu.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/chess/Main.class\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/chess/view/ChessGameFrame.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/chess/view/ChessGameFrame.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/ChessGameFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/ChessGameFrame.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"29JviwxYisVLzFIzq59aWAUuWmz\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n    <option name=\"showVisibilityIcons\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Infinity\\Documents\\GitHub\\chess\\chess\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Menu\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"chess\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Menu\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Menu\" />\r\n      <module name=\"chess\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Menu\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"40b01812-44d1-4a7a-94d6-52a249b190cf\" name=\"Changes\" comment=\"\" />\r\n      <created>1652844135390</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1652844135390</updated>\r\n      <workItem from=\"1652844136569\" duration=\"881000\" />\r\n      <workItem from=\"1652853532261\" duration=\"4705000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.History.Properties\">\r\n    <option name=\"COLUMN_ID_ORDER\">\r\n      <list>\r\n        <option value=\"Default.Root\" />\r\n        <option value=\"Default.Author\" />\r\n        <option value=\"Default.Date\" />\r\n        <option value=\"Default.Subject\" />\r\n        <option value=\"Space.CommitStatus\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a6c2f0ef027deb4577b57e3d68144f6dd19725d0)
+++ b/.idea/workspace.xml	(date 1652866132236)
@@ -2,12 +2,13 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="40b01812-44d1-4a7a-94d6-52a249b190cf" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/src/Menu.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/chess/Main.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/chess/Menu.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/chess/Menu.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/out/production/chess/view/ChessGameFrame.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/chess/view/ChessGameFrame.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/chess/view/Chessboard.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/chess/view/Chessboard.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Menu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Menu.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/view/ChessGameFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/ChessGameFrame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/Chessboard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/Chessboard.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -30,7 +31,7 @@
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/.." />
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
